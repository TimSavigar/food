import { useEffect, useState } from 'react'

interface AIImageProps {
  prompt: string
  alt?: string
  className?: string
  size?: '512x512' | '1024x1024'
}

/**
 * AIImage – renders an image generated by the backend AI image endpoint.
 * On mount, it POSTs `{ prompt, size }` to `/api/images/generate` and uses the returned `imageUrl`.
 */
const AIImage = ({ prompt, alt = '', className = '', size = '512x512' }: AIImageProps) => {
  const [url, setUrl] = useState<string>('')
  const [loading, setLoading] = useState<boolean>(true)
  const [error, setError] = useState<string>('')

  useEffect(() => {
    let isMounted = true
    const generate = async () => {
      try {
        setLoading(true)
        const res = await fetch('/api/images/generate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ prompt, size })
        })

        if (!res.ok) {
          throw new Error(`Failed: ${res.status}`)
        }
        const data: { imageUrl: string } = await res.json()
        if (isMounted) {
          setUrl(data.imageUrl)
        }
      } catch (err: any) {
        if (isMounted) {
          setError(err.message)
        }
      } finally {
        if (isMounted) {
          setLoading(false)
        }
      }
    }

    generate()
    return () => {
      isMounted = false
    }
  }, [prompt, size])

  if (loading) {
    return (
      <div className={`flex items-center justify-center bg-gray-100 text-gray-400 ${className}`}>
        Loading image…
      </div>
    )
  }

  if (error || !url) {
    return (
      <div className={`flex items-center justify-center bg-gray-100 text-red-500 ${className}`}>
        Failed to load image
      </div>
    )
  }

  return <img src={url} alt={alt} className={className} />
}

export default AIImage